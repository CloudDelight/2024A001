Terraform is an infrastructure as code tool that lets you build, change, and version 
cloud and on-prem resources safely and efficiently.

Terraform creates and manages resources on cloud platforms and other services through their application 
programming interfaces (APIs). 
Providers enable Terraform to work with virtually any platform or service with an accessible API.

The core Terraform workflow consists of three stages:

folder created for terraform files(.tf) --> place terraform code 


# terraform init 

providers.tf - to carry the provider information - AWS, Azure, GCP, Alibaba

local machine will download all the required binaries for aws for further action

# terraform plan

set of code example - ec2 - 6, load balancer, rds
syntax
blueprint of what it will create

# terraform apply

actually creates the resources



Write: You define resources, which may be across multiple cloud providers and services. 
For example, you might create a configuration to deploy an application on virtual machines 
in a Virtual Private Cloud (VPC) network with security groups and a load balancer.

Plan: Terraform creates an execution plan describing the infrastructure it will create, 
update, or destroy based on the existing infrastructure and your configuration.

Apply: On approval, Terraform performs the proposed operations in the correct order, 
respecting any resource dependencies. For example, if you update the properties of a VPC and 
change the number of virtual machines in that VPC, Terraform will recreate the VPC 
before scaling the virtual machines.


BLOCKS

Resource Blocks
Resources are the most important element in the Terraform language. Each resource block describes one or more 
infrastructure objects, such as virtual networks, compute instances, 
or higher-level components such as DNS records.

Syntax
resource "aws_instance" "web" {
  ami           = "ami-a1b2c3d4"
  instance_type = "t2.micro"
}


Data Sources
Data sources allow Terraform to use information defined outside of Terraform, defined by 
another separate Terraform configuration, or modified by functions.

Modules
https://developer.hashicorp.com/terraform/language/modules

module "aws_instance" "web" {
  ami           = "var.instance_ami"
  instance_type = "t2.micro"
}

variables.tf

instance_ami = "MIBKJSKJS"

BACKEND

terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "path/to/my/key"
    region = "us-east-1"
  }
}


Terraform file types include:

main.tf – 
containing the resource blocks that define the resources to be created in the target cloud platform.

variables.tf – 
containing the variable declarations used in the resource blocks.

provider.tf – 
containing the terraform block, s3 backend definition, provider configurations, and aliases.

output.tf – 
containing the output that needs to be generated on successful completion of “apply” operation.

*.tfvars – 
containing the environment-specific default values of variables.
